#!/bin/bash

CMD=$( basename $0 )
VERSION="0.2"
USAGE="Usage: $CMD [-h] [-m mode] [-a bitrate | -v quality ] inputfiles ..."

# ---------------------------------------------------------
function printusage () {
  test "$1" && echo -e >&2 "$CMD: $1"
  echo >&2 "$USAGE"
  exit 2
}
# ---------------------------------------------------------
function printhelp () {
  cat << EOF
ogg2mp3 version $VERSION 
Bulk transcoding of OGG Vorbis to MP3. 

(c) 2008 by Christoph Souris
Released without warranty under the terms of the Artistic License.

$USAGE

Options:
  -h, --help            Print help
  -q, --quiet           Do not print verbose messages.
  -m, --mode=MODE       Define stereo mode where MODE may be (j)oint,
                        (s)imple, (f)orce, (d)dual-mono, (m)ono
  -a, --abr=BITRATE     Use ABR encoding method with specified average
                        bit rate. See LAME man page for details.
  -v, --vbr=QUALITY     Use VBR encoding method with specified quality
                        setting. See LAME man page for details.
EOF
  exit 0
}
# ---------------------------------------------------------
function print () {
   C=$1
   shift
   for MSG in "$@"; do
      echo -e >&$C "$MSG"
   done
}
# ---------------------------------------------------------
function verbose () {
  [ "$QUIET" ] || print 1 "$@"
}
# ---------------------------------------------------------
function warn () {
  print 2 "$@"
}
# ---------------------------------------------------------
function fail () {
  print 2 "$@"
  exit 1
}

# ---------------------------------------------------------
# parse command line options
# ---------------------------------------------------------

OPTS=$( getopt -n $CMD -o hqm:a:v: --long help,mode:,abr:,vbr: -- "$@" )
eval set -- $OPTS

while [ "$#" -gt 0 ]; do
  case "$1" in
    -h|--help)  printhelp;;
    -q|--quiet)     QUIET="TRUE";;
    -m|--mode)      MODE="${2:0:1}"; shift;;
    -a|--abr)       ABR="$2"; shift;;
    -v|--vbr)       VBR="$2"; shift;;
    --)             shift; break;; # $@ is used below
    *)              printusage "Invalid option '$1'!";;
  esac
  shift
done

[[ "$ABR" && "$VBR" ]] && printusage "Only either ABR or VBR is allowed!"
[[ "$1" ]] || printusage "No input files defined!"
[[ "$ABR" || "$VBR" ]] || AUTOABR="TRUE"

# define encoding options
test "$MODE" && MODE="-m $MODE"
test "$ABR" && METHOD="--abr $ABR"
test "$VBR" && METHOD="--vbr-new -V $VBR"

verbose "   Mode: $MODE"
verbose "   Method $METHOD"

# ---------------------------------------------------------
# check dependencies
# ---------------------------------------------------------

OGGINFO=$( which ogginfo )
OGGDEC=$( which oggdec )
LAME=$( which lame )

MSG="Unable to locate '@' command line utility!"
test "$OGGINFO" || FAIL="${MSG/@/ogginfo}\n"
test "$OGGDEC" || FAIL="$FAIL${MSG/@/oggdec}\n"
test "$LAME" || FAIL="$FAIL${MSG/@/lame}\n"
test "$FAIL" && fail "${FAIL%%\\n}"

# ---------------------------------------------------------
# transcode 
# ---------------------------------------------------------

function transcode () {

   function printinfo () {
      test "$2" && verbose "   $1: $2"
   }

   function parsetag () {
      echo "$1" | grep -i "$2=" | cut -d= -f2
   }

   # read ogginfo output
   OGGINFO=$( ogginfo "$1" )
   test "$?" != "0" && fail "ogginfo failed!" "$OGGINFO"
 
   # parse nominal bitrate
   if [ "$AUTOABR" ]; then
      BITRATE=$( echo "$OGGINFO" | grep "Nominal bitrate:" | cut -d' ' -f3 )
      test "$BITRATE" || fail "Unable to parse bitrate!"
      METHOD="--abr $BITRATE"
      printinfo "Bitrate" "$BITRATE"
   fi

   # parse tags
   ARTIST=$( parsetag "$OGGINFO" "artist" )
   printinfo Artist "$ARTIST"
   ALBUM=$( parsetag "$OGGINFO" "album" )
   printinfo Album "$ALBUM"
   TITLE=$( parsetag "$OGGINFO" "title" )
   printinfo Title "$TITLE"
   TRACKNUMBER=$( parsetag "$OGGINFO" "tracknumber" )
   printinfo "Track number" "$TRACKNUMBER"
   YEAR=$( parsetag "$OGGINFO" "date" )
   printinfo Year "$YEAR"
   GENRE=$( parsetag "$OGGINFO" "genre" )
   printinfo Genre "$GENRE"
   COMMENT=$( parsetag "$OGGINFO" "comment" )
   printinfo Comment "$COMMENT"
   
   # decode | encode
   oggdec -Q -o- "$1" | lame -S $MODE $METHOD -q7 \
      --ta "$ARTIST" --tt "$TITLE" --tl "$ALBUM" --ty "$YEAR" --tn "$TRACKNUMBER" --tg "$GENRE" --tc "$COMMENT" \
	  - "${1/.ogg/.mp3}"
}

# ---------------------------------------------------------
#  process recursion
# ---------------------------------------------------------

function isogg () {
   # grep will have an error exit status if nothing was matched
   file "$1" | grep "Ogg data" | grep "Vorbis audio" > /dev/null
}

function processfile () {
   FILE="$@"
   
   # fail if invalid file
   test -r "$FILE" || fail "Unable to read file '$FILE'!"
   
   # if directory, process content
   if [ -d "$FILE" ]; then
      verbose "Processing directory '$FILE' ..."
      for SUBFILE in "$FILE"/*; do
      
         processfile "$SUBFILE"
      done

   # else: transcode file if ogg
   else
      verbose "Processing file '$FILE' ..."
      if isogg "$FILE"; then 
         transcode "$FILE"
      else
         warn "Not an Ogg Vorbis file: '$FILE'"
      fi
   fi
}

# ---------------------------------------------------------
#  main (recursion start)
# ---------------------------------------------------------

for FILE in "$@"; do
   processfile "$FILE"
done


